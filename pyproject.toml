[project]
name = "python-omnilogic-local"
version = "0.19.0"
description = "A library for local control of Hayward OmniHub/OmniLogic pool controllers using their local API"
authors = [
    {name = "Chris Jowett",email = "421501+cryptk@users.noreply.github.com"},
    {name = "djtimca"},
    {name = "garionphx"}
]
license = {text = "Apache-2.0"}
readme = "README.md"
requires-python = ">=3.10,<3.14"
dependencies = [
    "pydantic (>=1.10.17)",
    "xmltodict (>=0.13.0,<0.14.0)",
    "click (>=8.0.0,<8.1.0)",
]

[project.scripts]
omnilogic = "pyomnilogic_local.cli.cli:entrypoint"

[tool.poetry]
packages = [{include = "pyomnilogic_local"}]

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.8.0"
mypy = "^1.14.0"
pylint = "^3.3.3"
pytest = "^7.4.4"
pytest-cov = "^4.1.0"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length=140

[tool.isort]
# https://github.com/PyCQA/isort/wiki/isort-Settings
profile = "black"

[tool.mypy]
python_version = "3.13"
plugins = [
    "pydantic.mypy",
]
follow_imports = "silent"
strict = true
ignore_missing_imports = true
disallow_subclassing_any = false
warn_return_any = false

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pylint.MAIN]
py-version = "3.13"
extension-pkg-allow-list = [
    "pydantic",
]
ignore = [
    "tests",
]
# Use a conservative default here; 2 should speed up most setups and not hurt
# any too bad. Override on command line as appropriate.
jobs = 2
load-plugins = [
    "pylint.extensions.code_style",
    "pylint.extensions.typing",
]

[tool.pylint."FORMAT"]
expected-line-ending-format = "LF"
# Maximum number of characters on a single line.
max-line-length=140

[tool.pylint."MESSAGES CONTROL"]
# Reasons disabled:
# format - handled by black
# locally-disabled - it spams too much
# duplicate-code - unavoidable
# cyclic-import - doesn't test if both import on load
# abstract-class-little-used - prevents from setting right foundation
# unused-argument - generic callbacks and setup methods create a lot of warnings
# too-many-* - are not enforced for the sake of readability
# too-few-* - same as too-many-*
# abstract-method - with intro of async there are always methods missing
# inconsistent-return-statements - doesn't handle raise
# too-many-ancestors - it's too strict.
# wrong-import-order - isort guards this
# consider-using-f-string - str.format sometimes more readable
# ---
# Pylint CodeStyle plugin
# consider-using-namedtuple-or-dataclass - too opinionated
# consider-using-assignment-expr - decision to use := better left to devs
disable = [
    "format",
    "abstract-method",
    "cyclic-import",
    "duplicate-code",
    "inconsistent-return-statements",
    "locally-disabled",
    "not-context-manager",
    "too-few-public-methods",
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-statements",
    "too-many-boolean-expressions",
    "unused-argument",
    "wrong-import-order",
    "wrong-import-position",
    "consider-using-f-string",
    # The below are only here for now, we should fully document once the codebase stops fluctuating so much
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
]
enable = [
    "useless-suppression",
    "use-symbolic-message-instead",
]

[tool.ruff]
line-length = 140

[tool.semantic_release]
branch = "main"
version_toml = "pyproject.toml:project.version"
build_command = "pip install poetry && poetry build"
